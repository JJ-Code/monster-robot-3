{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/scroll/Scroll.jsx","components/search-box/SearchBox.jsx","components/header/Header.jsx","actions/robotsActions.jsx","actions/types.jsx","components/ErrorBoundry/ErrorBoundry.jsx","App.jsx","reducers/robotsReducer.jsx","reducers/index.jsx","store.jsx","serviceWorker.js","index.js"],"names":["Card","id","name","email","username","className","alt","src","CardList","robots","map","robot","index","key","Scroll","props","style","overflowY","border","height","children","SearchBox","onSearchChange","aria-label","type","placeholder","onChange","connect","setCurrentSearch","search_val","console","log","payload","e","preventDefault","target","value","ErrorBoundry","error","state","fetchRobots","dispatch","a","fetch","then","response","json","data","statusText","robotFriends","noResults","useEffect","length","initialState","defaultRobots","combineReducers","action","filterRobots","filter","robotFriend","toLowerCase","includes","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1936d2f1.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({ id, name, username, email }) => {\n  return (\n    <div className='card-container bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5'>\n      <img alt=\"monster\" src={`https://robohash.org/${id}?set=set3&size=200x200`} />\n      <h2>{name}</h2>\n      {/* <p>{username}</p> */}\n      <p>{email}</p>\n\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react'\nimport Card from \"../card/Card\";\n\n\nconst CardList = ({robots}) => {\n  return (\n    <div className='card-list'>\n      {robots.map((robot, index) => {\n        return <Card key={index} id={robot.id} name={robot.name} username={robot.username} email={robot.email} />\n      })}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '600px' }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;\n","import React from 'react'\n\nconst SearchBox = ({ onSearchChange }) => {\n  return (\n    <div className='p2'>\n      <input\n        aria-label='Search Robots'\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search Robots'\n        onChange={onSearchChange} />\n    </div>\n  )\n}\n\nexport default SearchBox\n\n//use for screen readers aria-label='Search Robots'\n","import React from 'react'\nimport SearchBox from \"../search-box/SearchBox\";\nimport { connect } from 'react-redux';\nimport { setCurrentSearch } from \"../../actions/robotsActions\";\n\nconst Header = ({ setCurrentSearch }) => {\n  const onSearchChange = (e) => {\n    e.preventDefault();\n    setCurrentSearch(e.target.value)\n  }\n  return (\n    <div>\n      <h1 className='f1'>Robot Friends</h1>\n      <SearchBox onSearchChange={onSearchChange} />\n    </div>\n  )\n}\n\nexport default connect(null, { setCurrentSearch })(Header);\n","import { GET_ROBOTS,  SET_CURRENT_ROBOTS, ROTBOTS_ERROR } from \"./types\";\n\n\n//fetech robots from API\nexport const fetchRobots = () => async dispatch => {\n  try {\n    const data = await fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\n      \n    dispatch({\n      type: GET_ROBOTS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: ROTBOTS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n};\n\n\n// Set current search\nexport const setCurrentSearch = search_val => {\n  console.log(search_val);\n  \n  return {\n    type: SET_CURRENT_ROBOTS,\n    payload: search_val\n  };\n};","export const GET_ROBOTS = 'GET_ROBOTS';\nexport const ROTBOTS_ERROR = 'ROTBOTS_ERROR';\nexport const SET_CURRENT_ROBOTS = 'SET_CURRENT_ROBOTS';\n\n//export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD';","//Error Boundary only exist for class components but you can use a try catch to do the same thing since there is no hook version of componentdidcatch. To see the the class version see below functional component \n\n\nimport React from 'react'\n\nconst ErrorBoundry = (props) => {\n  console.log(props.children);\n\n  try {\n    return props.children\n  } catch (error) {\n    console.log(error);\n    return (<h1>Something has went wrong</h1>)\n\n  }\n}\n\nexport default ErrorBoundry;\n\n\n// import React, { Component, Fragment } from 'react'\n\n// class ErrorBoundry extends Component {\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       hasError: false\n//     }\n//   }\n\n//   componentDidCatch(error, info) {\n//     this.setState({ hasError: true })\n//     console.log(error);\n\n//   }\n\n//   render() {\n//     console.log(this.props)\n//     console.log(this.state.hasError)\n//     return (\n//       <Fragment>\n//         {(this.state.hasError === false) ?\n//           (this.props.children) : (<h1>Something has went wrong</h1>)}\n//       </Fragment>)\n//   }\n// };\n\n// export default ErrorBoundry;","import React, { useEffect } from 'react';\nimport CardList from \"./components/card-list/CardList\";\nimport Scroll from \"./components/scroll/Scroll\";\nimport Header from \"./components/header/Header\";\nimport ErrorBoundry from \"./components/ErrorBoundry/ErrorBoundry\";\nimport { connect } from 'react-redux';\nimport { fetchRobots } from \"./actions/robotsActions\";\nimport './App.css';\n\n\nconst App = ({ robots: { robotFriends, noResults }, fetchRobots }) => {\n\n  useEffect(() => {\n    fetchRobots()\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <div className='App tc'>\n      <Header />\n      <Scroll>\n        {robotFriends.length === 0 ? (<h1>Loading...</h1>) :\n          (\n            <ErrorBoundry>\n              {(noResults === true) ? (<h2>No results...</h2>) : (<CardList robots={robotFriends} />)}\n            </ErrorBoundry>\n          )}\n      </Scroll>\n    </div>\n\n\n  );\n};\n\nconst mapStateToProps = state => ({\n  robots: state.robots\n});\n\nexport default connect(mapStateToProps, { fetchRobots })(App);\n","import { GET_ROBOTS, SET_CURRENT_ROBOTS, ROTBOTS_ERROR } from \"../actions/types\";\n\nconst initialState = {\n  robotFriends: [],\n  defaultRobots: [],\n  noResults: false,\n  error: null\n}\n\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ROBOTS:\n      return {\n        ...state,\n        defaultRobots: action.payload,\n        robotFriends: action.payload\n      };\n    case SET_CURRENT_ROBOTS:\n      console.log(state.robotFriends);\n      const filterRobots = state.defaultRobots.filter(robotFriend => robotFriend.name.toLowerCase().includes(action.payload.toLowerCase()));\n      console.log(filterRobots);\n\n      return {\n        ...state,\n        robotFriends: (filterRobots.length === 0) ? state.defaultRobots : filterRobots,\n        noResults: (filterRobots.length === 0) ? true : false\n\n      };\n    case ROTBOTS_ERROR:\n      console.error(action.payload);\n      return {\n        ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport robotsReducer from \"./robotsReducer\";\n//import searchReducer from './searchReducer';\n\n\nexport default combineReducers({\n  robots: robotsReducer\n});\n\n\n//search: searchReducer,","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n//import { createLogger } from \"redux-logger\";\n\nconst initialState = {};\n//logger is the same thing as composeWithDevTools\n//const logger = createLogger();\n//const middleware = [thunk, logger];\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}